A Double Ended Queue.
=====================

Deque(ADT): Definition
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
addFirst(e)   	inserts e at the head of the deque
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
addLast(e) 	inserts e at the tail of the deque
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
removeFirst() 	removes and returns the first element in the deque
	      	throws an empty deque exception 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
removeLast() 	removes and returns the last element in the deque
	     	throws an empty deque exception 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
getFirst() 	returns the first element in the deque
	   	throws an empty deque exception
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
getLast() 	returns the last element in the deque
	  	throws and empty deque exception
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
size() 		returns the number of elements in the deque
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
isEmpty() 	returns true if the deque is empty; false otherwise
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
offerFirst(e) 	Inserts e at the head of the deque unless the deque
		is full, in which case this method returns false;
		if the method succeeds, it returns true
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
offerLast(e) 	Inserts e at the tail of the deque unless the deque 
		is full, in which case this method returns false;
		if the method succeeds, it returns true
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
pollFirst()	Removes and returns the first element of the deque;
		if the deque is empty, this method returns null.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
pollLast()	Removes and returns the last element of the deque;
		if the deque is empty, this method returns null.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
peekFirst() 	Returns, but does not remove the first element of the
		deque; if the deque is empty, this method returns null.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
peekLast() 	Returns, but does not remove the last element of the
		deque; if the deque is empty, this method returns null.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

D = [1,2,3,4,5,6,7,8]

Use Q = [] to get D = [1,2,3,5,4,6,7,8] (4 and 5 are swapped)

D			Q		Operation
[1,2,3,4,5,6,7,8] 	[] 		
[2,3,4,5,6,7,8,1]	[]		D.addLast(D.removeFirst())
	.		.		.
	.		.		.
	.		.		.
[4,5,6,7,8,1,2,3]		
[5,6,7,8,1,2,3]		[4]		Q.enqueue(D.removeFirst())
[6,7,8,1,2,3]		[4,5]		""
[4,6,7,8,1,2,3]		[5]		D.addFirst(Q.dequeue())
[5,4,6,7,8,1,2,3]	[]		""
[5,4,6,7,8,1,2]		[3]		Q.enqueue(D.removeLast())
[5,4,6,7,8,1]		[3,2]		""
[5,4,6,7,8]		[3,2,1]		""
[3,5,4,6,7,8]		[2,1]		D.addFirst(Q.dequeue())
			.		.
			.		.
[1,2,3,4,5,6,7,8]





